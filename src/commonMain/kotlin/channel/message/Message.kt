@file:OptIn(ExperimentalJsExport::class)

package cloud.drakon.ktdiscord.channel.message

import cloud.drakon.ktdiscord.Snowflake
import cloud.drakon.ktdiscord.channel.attachment.Attachment
import cloud.drakon.ktdiscord.channel.embed.Embed
import cloud.drakon.ktdiscord.component.ActionRow
import cloud.drakon.ktdiscord.interaction.MessageInteraction
import cloud.drakon.ktdiscord.permissions.Role
import cloud.drakon.ktdiscord.user.User
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlin.js.ExperimentalJsExport
import kotlin.js.JsExport

/**
 * Represents a message sent in a channel within Discord.
 * @property id ID of the message.
 * @property channelId ID of the [Channel] the message was sent in.
 * @property author The author of this message.
 * @property content Contents of the message.
 * @property timestamp When this message was sent.
 * @property editedTimestamp When this message was edited (or `null` if never).
 * @property tts Whether this was a TTS message.
 * @property mentionEveryone Whether this message mentions everyone.
 * @property mentions Users specifically mentioned in the message.
 * @property mentionRoles Roles specifically mentioned in this message.
 * @property attachments Any attached files.
 * @property embeds Any embedded content.
 * @property pinned Whether this message is pinned.
 * @property webhookId If the message is generated by a webhook, this is the webhook's ID.
 * @property type Type of message.
 * @property applicationId if the message is an [Interaction] or application-owned webhook, this is the ID of the application.
 * @property flags [MessageFlags] combined as a [bitfield](https://en.wikipedia.org/wiki/Bit_field).
 * @property interaction Sent if the message is a response to an [Interaction].
 * @property components Sent if the message contains components like [Button]s, [ActionRow]s, or other interactive components.
 */
@JsExport @Serializable
data class Message(
    val id: Snowflake,
    @SerialName("channel_id") val channelId: Snowflake,
    val author: User,
    val content: String,
    val timestamp: String,
    @SerialName("edited_timestamp") val editedTimestamp: String?,
    val tts: Boolean,
    @SerialName("mention_everyone") val mentionEveryone: Boolean,
    val mentions: Array<User>,
    @SerialName("mention_roles") val mentionRoles: Array<Role>,
    val attachments: Array<Attachment>,
    val embeds: Array<Embed>,
    val pinned: Boolean,
    @SerialName("webhook_id") val webhookId: Snowflake? = null,
    val type: MessageType,
    @SerialName("application_id") val applicationId: Snowflake? = null,
    val flags: Int? = null,
    val interaction: MessageInteraction? = null,
    val components: Array<ActionRow>? = null,
)
